def normalization_test(mantissa, exponent):

    exponent = int(exponent)

    # Step 1: Look for '.'
    dot_index = mantissa.find('.')

    # if no '.', add one to the right-msot part of the string
    if '.' not in mantissa:
        mantissa += '.'

    # Step 2: Check if '1.' is in the leftmost part of the string
    if not mantissa.startswith('1.'):
        new_mantissa = ""
        found_target = False
        
        whole, fraction = str(mantissa).split(".")

        mantissa = whole + fraction

        ''' Step 3a: check if there is a '1" anywhere on left side portion of current whole part.
                        if there is, iterate through each char until encounter FIRST "1" then insert a "."
        '''   
        for index, one in enumerate(whole):
            #check left:
            new_mantissa += one 
            if one == "1" and not found_target:
                new_mantissa += "."
                found_target = True
                new_mantissa = new_mantissa+fraction

        # Step 4a: If new "." was inserted to whole, add 
        exponent = (dot_index-index) + exponent# if left add
        
        ''' Step 3b: check if there is a '1" anywhere on right side portion of current fraction part.
                        if there is, iterate through each char until encounter FIRST "1" then insert a "."
        '''     
        if not found_target:
            for index, one in enumerate(fraction):
                new_mantissa += one
                if one == "1" and not found_target:
                    new_mantissa += "."
                    # Step 4a: If new "." was inserted in fraction, subtract 
                    exponent = (dot_index-index) - exponent# if right subtact
                    found_target = True
                
        return new_mantissa, exponent

mantissa = input()
exponent = input()
new_mantissa, new_exponent = normalization_test(mantissa, exponent)
print("Normalized number: ", new_mantissa)
print("exponent number: ", new_exponent)